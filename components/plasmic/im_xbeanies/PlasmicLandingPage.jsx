// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8HMNFKnEv7gJ55SbTqvTiU
// Component: 4TAJZAGeri
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import LandingClaimedButton from "../../LandingClaimedButton"; // plasmic-import: yyu20WZeYJ/component
import LandingPageAssets from "../../LandingPageAssets"; // plasmic-import: pvXv2nIO7t/component
import UnclaimedListBox from "../../UnclaimedListBox"; // plasmic-import: u0YbhZ-njs/component
import ItemsNav from "../../ItemsNav"; // plasmic-import: Gvxz35rlhk/component
import ImNotArtFooter from "../../ImNotArtFooter"; // plasmic-import: 1zyzTuVyET/component
import { useScreenVariants as useScreenVariantscywHnA3Lrzaxm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CywHnA3LRZAXM/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_im_xbeanies.module.css"; // plasmic-import: 8HMNFKnEv7gJ55SbTqvTiU/projectcss
import sty from "./PlasmicLandingPage.module.css"; // plasmic-import: 4TAJZAGeri/css
import Line1Icon from "./icons/PlasmicIcon__Line1"; // plasmic-import: 6RdOQRrPg/icon

export const PlasmicLandingPage__VariantProps = new Array();

export const PlasmicLandingPage__ArgProps = new Array("landingPageListBox");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLandingPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscywHnA3Lrzaxm()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.PlasmicImg
            data-plasmic-name={"ianLogoFull"}
            data-plasmic-override={overrides.ianLogoFull}
            alt={""}
            className={classNames(sty.ianLogoFull)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"50%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/im_xbeanies/images/imnotArtLogoGreypng.png",
              fullWidth: 3125,
              fullHeight: 583,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pyhjt
            )}
          >
            {"PHYGITAL BEANIES"}
          </div>

          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            className={classNames("__wab_instance", sty.reveal)}
            direction={"right"}
            effect={"slide"}
            reverse={false}
            triggerOnce={true}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? "20%"
                  : "60%"
              }
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"eager"}
              src={{
                src: "/plasmic/im_xbeanies/images/beanieArtpicjpeg.jpeg",
                fullWidth: 1170,
                fullHeight: 1603,
                aspectRatio: undefined
              }}
            />
          </Reveal>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___9Zl8A
            )}
          >
            {"Check Beanies Claimed Status"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__eaFx)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"items"}
                data-plasmic-override={overrides.items}
                hasGap={true}
                className={classNames(projectcss.all, sty.items)}
              >
                <LandingClaimedButton
                  data-plasmic-name={"claimedButton"}
                  data-plasmic-override={overrides.claimedButton}
                  className={classNames("__wab_instance", sty.claimedButton)}
                />

                <LandingClaimedButton
                  data-plasmic-name={"unclaimedButton"}
                  data-plasmic-override={overrides.unclaimedButton}
                  className={classNames("__wab_instance", sty.unclaimedButton)}
                  unclaimedButton={true}
                />
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"landingPageListBox"}
              data-plasmic-override={overrides.landingPageListBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.landingPageListBox)}
            >
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.landingPageListBox
              })}
            </p.Stack>

            {true ? (
              <div
                data-plasmic-name={"items2"}
                data-plasmic-override={overrides.items2}
                className={classNames(projectcss.all, sty.items2)}
              >
                <LandingClaimedButton
                  data-plasmic-name={"claimedButton2"}
                  data-plasmic-override={overrides.claimedButton2}
                  className={classNames("__wab_instance", sty.claimedButton2)}
                />

                <LandingClaimedButton
                  data-plasmic-name={"unclaimedButton2"}
                  data-plasmic-override={overrides.unclaimedButton2}
                  className={classNames("__wab_instance", sty.unclaimedButton2)}
                  unclaimedButton={true}
                />

                {(
                  (() => {
                    try {
                      return [
                        {
                          id: "640692cc177caf1ba51b7621",
                          tagUid: "04:7A:53:76:73:00:00",
                          mintId: "null",
                          mediaUrl:
                            "https://gateway.pinata.cloud/ipfs/QmREjM3TDrG931ecoNXMifpnVruFnzgw6Rv3DRpECLvVRp?_gl=1*6yrfy5*_ga*MTgzOTY5NDM1Mi4xNjc2NzUwMzUz*_ga_5RMPXG14TE*MTY3NzAzNDkzNy41LjAuMTY3NzAzNDk0MC41Ny4wLjA.%22,",
                          metadataUrl: "N/A",
                          issuer: "imNotArt",
                          claimed: true,
                          owner: "User X"
                        },
                        {
                          id: "640692cc177caf1ba51b7621",
                          tagUid: "04:7A:53:76:73:00:00",
                          mintId: "null",
                          mediaUrl:
                            "https://gateway.pinata.cloud/ipfs/QmREjM3TDrG931ecoNXMifpnVruFnzgw6Rv3DRpECLvVRp?_gl=1*6yrfy5*_ga*MTgzOTY5NDM1Mi4xNjc2NzUwMzUz*_ga_5RMPXG14TE*MTY3NzAzNDkzNy41LjAuMTY3NzAzNDk0MC41Ny4wLjA.%22,",
                          metadataUrl: "N/A",
                          issuer: "imNotArt",
                          claimed: false,
                          owner: "User X"
                        },
                        {
                          id: "640692cc177caf1ba51b7621",
                          tagUid: "04:7A:53:76:73:00:00",
                          mintId: "null",
                          mediaUrl:
                            "https://gateway.pinata.cloud/ipfs/QmREjM3TDrG931ecoNXMifpnVruFnzgw6Rv3DRpECLvVRp?_gl=1*6yrfy5*_ga*MTgzOTY5NDM1Mi4xNjc2NzUwMzUz*_ga_5RMPXG14TE*MTY3NzAzNDkzNy41LjAuMTY3NzAzNDk0MC41Ny4wLjA.%22,",
                          metadataUrl: "N/A",
                          issuer: "imNotArt",
                          claimed: false,
                          owner: "User X"
                        },
                        {
                          id: "640692cc177caf1ba51b7621",
                          tagUid: "04:7A:53:76:73:00:00",
                          mintId: "null",
                          mediaUrl:
                            "https://gateway.pinata.cloud/ipfs/QmREjM3TDrG931ecoNXMifpnVruFnzgw6Rv3DRpECLvVRp?_gl=1*6yrfy5*_ga*MTgzOTY5NDM1Mi4xNjc2NzUwMzUz*_ga_5RMPXG14TE*MTY3NzAzNDkzNy41LjAuMTY3NzAzNDk0MC41Ny4wLjA.%22,",
                          metadataUrl: "N/A",
                          issuer: "imNotArt",
                          claimed: true,
                          owner: "User X"
                        },
                        {
                          id: "640692cc177caf1ba51b7621",
                          tagUid: "04:7A:53:76:73:00:00",
                          mintId: "null",
                          mediaUrl:
                            "https://gateway.pinata.cloud/ipfs/QmREjM3TDrG931ecoNXMifpnVruFnzgw6Rv3DRpECLvVRp?_gl=1*6yrfy5*_ga*MTgzOTY5NDM1Mi4xNjc2NzUwMzUz*_ga_5RMPXG14TE*MTY3NzAzNDkzNy41LjAuMTY3NzAzNDk0MC41Ny4wLjA.%22,",
                          metadataUrl: "N/A",
                          issuer: "imNotArt",
                          claimed: true,
                          owner: "User X"
                        },
                        {
                          id: "640692cc177caf1ba51b7621",
                          tagUid: "04:7A:53:76:73:00:00",
                          mintId: "null",
                          mediaUrl:
                            "https://gateway.pinata.cloud/ipfs/QmREjM3TDrG931ecoNXMifpnVruFnzgw6Rv3DRpECLvVRp?_gl=1*6yrfy5*_ga*MTgzOTY5NDM1Mi4xNjc2NzUwMzUz*_ga_5RMPXG14TE*MTY3NzAzNDkzNy41LjAuMTY3NzAzNDk0MC41Ny4wLjA.%22,",
                          metadataUrl: "N/A",
                          issuer: "imNotArt",
                          claimed: false,
                          owner: "User X"
                        },
                        {
                          id: "640692cc177caf1ba51b7621",
                          tagUid: "04:7A:53:76:73:00:00",
                          mintId: "null",
                          mediaUrl:
                            "https://gateway.pinata.cloud/ipfs/QmREjM3TDrG931ecoNXMifpnVruFnzgw6Rv3DRpECLvVRp?_gl=1*6yrfy5*_ga*MTgzOTY5NDM1Mi4xNjc2NzUwMzUz*_ga_5RMPXG14TE*MTY3NzAzNDkzNy41LjAuMTY3NzAzNDk0MC41Ny4wLjA.%22,",
                          metadataUrl: "N/A",
                          issuer: "imNotArt",
                          claimed: true,
                          owner: "User X"
                        },
                        {
                          id: "640692cc177caf1ba51b7621",
                          tagUid: "04:7A:53:76:73:00:00",
                          mintId: "null",
                          mediaUrl:
                            "https://gateway.pinata.cloud/ipfs/QmREjM3TDrG931ecoNXMifpnVruFnzgw6Rv3DRpECLvVRp?_gl=1*6yrfy5*_ga*MTgzOTY5NDM1Mi4xNjc2NzUwMzUz*_ga_5RMPXG14TE*MTY3NzAzNDkzNy41LjAuMTY3NzAzNDk0MC41Ny4wLjA.%22,",
                          metadataUrl: "N/A",
                          issuer: "imNotArt",
                          claimed: false,
                          owner: "User X"
                        }
                      ];
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return [];
                      }
                      throw e;
                    }
                  })() ?? []
                ).map((currentItem, currentIndex) => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___75Py1)}
                    key={currentIndex}
                  >
                    <LandingPageAssets
                      data-plasmic-name={"landingPageAssets"}
                      data-plasmic-override={overrides.landingPageAssets}
                      className={classNames(
                        "__wab_instance",
                        sty.landingPageAssets
                      )}
                      landingUId={(() => {
                        try {
                          return currentItem.tagUid;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "Claimed";
                          }
                          throw e;
                        }
                      })()}
                      unclaimedAssets={(() => {
                        try {
                          return currentItem.claimed;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return "unclaimedAssets";
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                ))}

                <Line1Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"claimedListBox"}
                data-plasmic-override={overrides.claimedListBox}
                className={classNames(projectcss.all, sty.claimedListBox)}
              >
                <UnclaimedListBox
                  claimedListBox={true}
                  className={classNames(
                    "__wab_instance",
                    sty.unclaimedListBox__zvCk7
                  )}
                />

                <UnclaimedListBox
                  claimedListBox={true}
                  className={classNames(
                    "__wab_instance",
                    sty.unclaimedListBox__gcft
                  )}
                />
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"listBox"}
                data-plasmic-override={overrides.listBox}
                className={classNames(projectcss.all, sty.listBox)}
              >
                <UnclaimedListBox
                  className={classNames(
                    "__wab_instance",
                    sty.unclaimedListBox__baecK
                  )}
                />

                <UnclaimedListBox
                  className={classNames(
                    "__wab_instance",
                    sty.unclaimedListBox___9RwMo
                  )}
                />
              </div>
            ) : null}
            {true ? (
              <ItemsNav
                data-plasmic-name={"itemsNav"}
                data-plasmic-override={overrides.itemsNav}
                className={classNames("__wab_instance", sty.itemsNav)}
              />
            ) : null}
          </p.Stack>

          <ImNotArtFooter
            data-plasmic-name={"imNotArtFooter"}
            data-plasmic-override={overrides.imNotArtFooter}
            className={classNames("__wab_instance", sty.imNotArtFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "ianLogoFull",
    "reveal",
    "img",
    "items",
    "claimedButton",
    "unclaimedButton",
    "landingPageListBox",
    "items2",
    "claimedButton2",
    "unclaimedButton2",
    "landingPageAssets",
    "svg",
    "claimedListBox",
    "listBox",
    "itemsNav",
    "imNotArtFooter"
  ],

  ianLogoFull: ["ianLogoFull"],
  reveal: ["reveal", "img"],
  img: ["img"],
  items: ["items", "claimedButton", "unclaimedButton"],
  claimedButton: ["claimedButton"],
  unclaimedButton: ["unclaimedButton"],
  landingPageListBox: ["landingPageListBox"],
  items2: [
    "items2",
    "claimedButton2",
    "unclaimedButton2",
    "landingPageAssets",
    "svg"
  ],

  claimedButton2: ["claimedButton2"],
  unclaimedButton2: ["unclaimedButton2"],
  landingPageAssets: ["landingPageAssets"],
  svg: ["svg"],
  claimedListBox: ["claimedListBox"],
  listBox: ["listBox"],
  itemsNav: ["itemsNav"],
  imNotArtFooter: ["imNotArtFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLandingPage__ArgProps,
          internalVariantPropNames: PlasmicLandingPage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLandingPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLandingPage";
  } else {
    func.displayName = `PlasmicLandingPage.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingPage = Object.assign(
  // Top-level PlasmicLandingPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ianLogoFull: makeNodeComponent("ianLogoFull"),
    reveal: makeNodeComponent("reveal"),
    img: makeNodeComponent("img"),
    items: makeNodeComponent("items"),
    claimedButton: makeNodeComponent("claimedButton"),
    unclaimedButton: makeNodeComponent("unclaimedButton"),
    landingPageListBox: makeNodeComponent("landingPageListBox"),
    items2: makeNodeComponent("items2"),
    claimedButton2: makeNodeComponent("claimedButton2"),
    unclaimedButton2: makeNodeComponent("unclaimedButton2"),
    landingPageAssets: makeNodeComponent("landingPageAssets"),
    svg: makeNodeComponent("svg"),
    claimedListBox: makeNodeComponent("claimedListBox"),
    listBox: makeNodeComponent("listBox"),
    itemsNav: makeNodeComponent("itemsNav"),
    imNotArtFooter: makeNodeComponent("imNotArtFooter"),
    // Metadata about props expected for PlasmicLandingPage
    internalVariantProps: PlasmicLandingPage__VariantProps,
    internalArgProps: PlasmicLandingPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLandingPage;
/* prettier-ignore-end */
