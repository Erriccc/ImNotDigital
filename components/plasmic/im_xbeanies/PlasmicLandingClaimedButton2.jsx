// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8HMNFKnEv7gJ55SbTqvTiU
// Component: pvXv2nIO7t
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_im_xbeanies.module.css"; // plasmic-import: 8HMNFKnEv7gJ55SbTqvTiU/projectcss
import sty from "./PlasmicLandingClaimedButton2.module.css"; // plasmic-import: pvXv2nIO7t/css

export const PlasmicLandingClaimedButton2__VariantProps = new Array(
  "unclaimedButton"
);

export const PlasmicLandingClaimedButton2__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLandingClaimedButton2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "unclaimedButton",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.unclaimedButton
          : undefined
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <button
      data-plasmic-name={"claimed"}
      data-plasmic-override={overrides.claimed}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.claimed,
        {
          [sty.claimedunclaimedButton]: hasVariant(
            $state,
            "unclaimedButton",
            "unclaimedButton"
          )
        }
      )}
      onClick={async event => {
        const $steps = {};
        $steps["customFunction"] = true
          ? (() => {
              const args = {
                customFunction: __wrapUserFunction(
                  {
                    type: "InteractionArgLoc",
                    actionName: "customFunction",
                    interactionUuid: "vyybKBWV7g",
                    componentUuid: "pvXv2nIO7t",
                    argName: "customFunction"
                  },
                  () => () => {
                    const [visible, setVisible] = useState(true);
                    <landingClaimedButton
                      component="new-page-3"
                      componentProps={{
                        unclaimedListBox: {
                          style: { display: visible ? undefined : "none" }
                        },
                        unclaimedbutton: {
                          onClick: () => setVisible(!visible)
                        }
                      }}
                    />;
                  }
                )
              };
              return __wrapUserFunction(
                {
                  type: "InteractionLoc",
                  actionName: "customFunction",
                  interactionUuid: "vyybKBWV7g",
                  componentUuid: "pvXv2nIO7t"
                },
                () =>
                  (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [args]),
                args
              );
            })()
          : undefined;
        if (
          typeof $steps["customFunction"] === "object" &&
          typeof $steps["customFunction"].then === "function"
        ) {
          $steps["customFunction"] = await __wrapUserPromise(
            {
              type: "InteractionLoc",
              actionName: "customFunction",
              interactionUuid: "vyybKBWV7g",
              componentUuid: "pvXv2nIO7t"
            },
            $steps["customFunction"]
          );
        }
      }}
      ref={ref => {
        $refs["claimed"] = ref;
      }}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textunclaimedButton]: hasVariant(
            $state,
            "unclaimedButton",
            "unclaimedButton"
          )
        })}
      >
        {hasVariant($state, "unclaimedButton", "unclaimedButton")
          ? "UnClaimed"
          : "Claimed"}
      </div>
    </button>
  );
}

const PlasmicDescendants = {
  claimed: ["claimed", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLandingClaimedButton2__ArgProps,
          internalVariantPropNames: PlasmicLandingClaimedButton2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLandingClaimedButton2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "claimed") {
    func.displayName = "PlasmicLandingClaimedButton2";
  } else {
    func.displayName = `PlasmicLandingClaimedButton2.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingClaimedButton2 = Object.assign(
  // Top-level PlasmicLandingClaimedButton2 renders the root element
  makeNodeComponent("claimed"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicLandingClaimedButton2
    internalVariantProps: PlasmicLandingClaimedButton2__VariantProps,
    internalArgProps: PlasmicLandingClaimedButton2__ArgProps
  }
);

export default PlasmicLandingClaimedButton2;
/* prettier-ignore-end */
