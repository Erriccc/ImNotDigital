// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8HMNFKnEv7gJ55SbTqvTiU
// Component: pvXv2nIO7t
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_im_xbeanies.module.css"; // plasmic-import: 8HMNFKnEv7gJ55SbTqvTiU/projectcss
import sty from "./PlasmicLandingPageAssets.module.css"; // plasmic-import: pvXv2nIO7t/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Etw_otJIc8D/icon
import TimesIcon from "./icons/PlasmicIcon__Times"; // plasmic-import: 31Yg_fNWtbn/icon

export const PlasmicLandingPageAssets__VariantProps = new Array(
  "unclaimedAssets"
);

export const PlasmicLandingPageAssets__ArgProps = new Array("landingUId");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLandingPageAssets__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "unclaimedAssets",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.unclaimedAssets
          : undefined
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"claimed"}
      data-plasmic-override={overrides.claimed}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.claimed,
        {
          [sty.claimedunclaimedAssets]: hasVariant(
            $state,
            "unclaimedAssets",
            "unclaimedAssets"
          )
        }
      )}
      component={Link}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxunclaimedAssets]: hasVariant(
            $state,
            "unclaimedAssets",
            "unclaimedAssets"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Claimed",
          value: args.landingUId,
          className: classNames(sty.slotTargetLandingUId, {
            [sty.slotTargetLandingUIdunclaimedAssets]: hasVariant(
              $state,
              "unclaimedAssets",
              "unclaimedAssets"
            )
          })
        })}
      </div>

      {(
        hasVariant($state, "unclaimedAssets", "unclaimedAssets") ? true : true
      ) ? (
        <ChecksvgIcon
          className={classNames(projectcss.all, sty.svg___5ZyTm, {
            [sty.svgunclaimedAssets___5ZyTm0Tkyx]: hasVariant(
              $state,
              "unclaimedAssets",
              "unclaimedAssets"
            )
          })}
          role={"img"}
        />
      ) : null}
      {(
        hasVariant($state, "unclaimedAssets", "unclaimedAssets") ? true : true
      ) ? (
        <TimesIcon
          className={classNames(projectcss.all, sty.svg__zkSye, {
            [sty.svgunclaimedAssets__zkSye0Tkyx]: hasVariant(
              $state,
              "unclaimedAssets",
              "unclaimedAssets"
            )
          })}
          role={"img"}
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  claimed: ["claimed", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLandingPageAssets__ArgProps,
          internalVariantPropNames: PlasmicLandingPageAssets__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLandingPageAssets__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "claimed") {
    func.displayName = "PlasmicLandingPageAssets";
  } else {
    func.displayName = `PlasmicLandingPageAssets.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingPageAssets = Object.assign(
  // Top-level PlasmicLandingPageAssets renders the root element
  makeNodeComponent("claimed"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicLandingPageAssets
    internalVariantProps: PlasmicLandingPageAssets__VariantProps,
    internalArgProps: PlasmicLandingPageAssets__ArgProps
  }
);

export default PlasmicLandingPageAssets;
/* prettier-ignore-end */
